



cell_func:
  mov edx, [ebp+8]  ;get x
  mov eax, [ebp+12] ; get y
  mov dword[x], edx
  mov dword[y], eax
  mov ebx, dword[WorldWidth] ; get width
b1:
  push edx
  mul ebx ; (y-1) * width --> get row
  pop edx
  add eax, edx ;((y-1) * width) + x --> get core
b2:
  mov ecx, [state+eax] ; get current cell content
  mov dword[cur], ecx ; save current cell content
b3:
  mov dword[current_cell], eax ; save current cell

.neighbors:
  mov edx, dword[y]
  test edx, 1
  jz .is_even

  .is_odd:
    mov eax, 1
    mov ebx, -1
    push ebx
    push eax
    call calc_neighbor

    mov eax, 1
    mov ebx, 1
    push ebx
    push eax
    call calc_neighbor
    jmp .all

  .is_even :
    mov eax, -1
    mov ebx, -1
    push ebx
    push eax
    call calc_neighbor

    mov eax, -1
    mov ebx, 1
    push ebx
    push eax
    call calc_neighbor
    jmp .all

  .all:
    mov eax, 0
    mov ebx, -1
    push ebx
    push eax
    call calc_neighbor

    mov eax, 0
    mov ebx, 1
    push ebx
    push eax
    call calc_neighbor

    mov eax, 1
    mov ebx, 0
    push ebx
    push eax
    call calc_neighbor

    mov eax, -1
    mov ebx, 0
    push ebx
    push eax
    call calc_neighbor

  cmp dword[cur], 1
  jnz .dead
  cmp eax, 4 ; if cell is alive
  jz .will_be_alive
  cmp eax, 3
  jz .will_be_alive
  mov dword[cur], 0
  jmp .end
  .will_be_alive:
  mov dword[cur], 1
  jmp .end
  .dead: ;if cell is dead
  cmp eax, 2
  jnz .will_be_dead
  mov dword[cur], 1
  jmp .end
  .will_be_dead:
  mov dword[cur], 0
  mov ebx, dword[scheduler]
  call resume
  .end:
  mov ecx, dword[cur]
  mov edx, dword[current_cell]
  mov dword[state+edx], ecx
  mov ebx, dword[scheduler]
  call resume
  jmp cell_func

  check_neighbors:
  init_func
  mov ebx, [ebp+8]  ;get neighbor
  cmp ebx, 1  ;if neighbor is alive
  jnz .is_dead
  add eax, 1
  .is_dead:
  ret

calc_neighbor:
init_func
  mov ebx, [esp+8]                ; x+1 ||  x-1
  mov eax, dword[x] 
  add eax, ebx
  mov ebx, dword[WorldWidth]
  idiv ebx                        ; (x+1 || x-1) modulu width
  mov ecx, edx
b7:

  mov edx, [esp+12]               ; y+1  || y-1
  mov eax, dword[y]
  add eax, edx
  mov edx, dword[WorldLength]
  idiv edx                        ; (y+1 || y-1) modulu length
b8:
  mov eax, edx                    ; save y modulu
  mov ebx, dword[WorldWidth]
  mul ebx                         ; [(y+1 || y-1) modulu (length)] * width
  add eax, ecx                    ; {[(y+1 || y-1) modulu (length)] * width} + [(x+1 || x-1) modulu (width)]
  push eax
  call check_neighbors
b9:
  ret 
